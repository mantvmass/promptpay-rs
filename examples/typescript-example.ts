import init, { 
  PromptPayWasm, 
  quick_generate_wasm, 
  generate_with_svg_wasm,
  validate_merchant_id_wasm,
  is_valid_thai_phone,
  is_valid_tax_id,
  is_valid_ewallet_id,
  is_valid_amount,
  sanitize_phone
} from 'promptpay-rs';

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô PromptPay QR Generator ‡πÉ‡∏ô TypeScript

async function main() {
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô WebAssembly module
  await init();
  
  console.log('üöÄ PromptPay QR Generator - TypeScript Example');
  console.log('==============================================');

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
  console.log('\nüì± ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß');
  try {
    const payload = await quick_generate_wasm('0812345678', 100.50);
    console.log('Payload:', payload);
  } catch (error) {
    console.error('Error:', error);
  }

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö class
  console.log('\nüèóÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö class');
  try {
    const promptpay = new PromptPayWasm('0812345678');
    promptpay.set_amount(250.75);
    
    const merchantType = promptpay.get_merchant_type();
    console.log('Merchant Type:', merchantType);
    
    const payload = await promptpay.generate_payload();
    console.log('Payload:', payload);
    
    const svg = await promptpay.generate_svg();
    console.log('SVG generated successfully!');
    
    const html = await promptpay.generate_html();
    console.log('HTML img tag generated!');
    
    const allFormats = await promptpay.generate_all();
    console.log('All formats generated:', {
      hasSvg: !!allFormats.svg,
      hasPng: !!allFormats.png_base64,
      hasHtml: !!allFormats.html_img
    });
  } catch (error) {
    console.error('Error:', error);
  }

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Tax ID
  console.log('\nüè¢ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Tax ID');
  try {
    const taxId = '1234567890123'; // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Tax ID
    const promptpay = new PromptPayWasm(taxId);
    promptpay.set_amount(500.00);
    
    const merchantType = promptpay.get_merchant_type();
    console.log('Merchant Type:', merchantType);
    
    const svg = await promptpay.generate_svg();
    console.log('Tax ID QR Code SVG generated!');
  } catch (error) {
    console.error('Error:', error);
  }

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 4: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö E-Wallet ID
  console.log('\nüí≥ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 4: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö E-Wallet ID');
  try {
    const ewalletId = '123456789012345'; // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á E-Wallet ID
    const promptpay = new PromptPayWasm(ewalletId);
    
    const merchantType = promptpay.get_merchant_type();
    console.log('Merchant Type:', merchantType);
    
    const svg = await promptpay.generate_svg();
    console.log('E-Wallet QR Code SVG generated!');
  } catch (error) {
    console.error('Error:', error);
  }

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 5: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  console.log('\n‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 5: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
  console.log('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 0812345678:', is_valid_thai_phone('0812345678'));
  console.log('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 66812345678:', is_valid_thai_phone('66812345678'));
  console.log('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 1234567890:', is_valid_thai_phone('1234567890'));
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Tax ID
  console.log('Tax ID 1234567890123:', is_valid_tax_id('1234567890123'));
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
  console.log('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô 100.50:', is_valid_amount(100.50));
  console.log('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô -10.00:', is_valid_amount(-10.00));
  console.log('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô 1000000000.00:', is_valid_amount(1000000000.00));
  
  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
  console.log('‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:', sanitize_phone('081-234-5678'));
  console.log('‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:', sanitize_phone('+66 81 234 5678'));

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 6: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö custom config
  console.log('\n‚öôÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 6: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö custom config');
  try {
    const config = {
      country_code: 'TH',
      currency_code: '764',
      qr_size: 512,
      qr_dark_color: '#1a1a1a',
      qr_light_color: '#ffffff',
      qr_quiet_zone: 8,
      validate_input: true
    };
    
    const promptpay = await PromptPayWasm.with_config('0812345678', config);
    promptpay.set_amount(150.25);
    
    const svg = await promptpay.generate_svg();
    console.log('Custom config QR Code generated!');
  } catch (error) {
    console.error('Error:', error);
  }

  console.log('\nüéâ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
main().catch(console.error);

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Node.js environment
export async function generatePromptPayQR(merchantId: string, amount?: number) {
  await init();
  
  const promptpay = new PromptPayWasm(merchantId);
  if (amount) {
    promptpay.set_amount(amount);
  }
  
  const result = await promptpay.generate_all();
  return result;
}

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô validation functions
export function validatePromptPayInput(merchantId: string, amount?: number) {
  const errors: string[] = [];
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö merchant ID
  if (!is_valid_thai_phone(merchantId) && 
      !is_valid_tax_id(merchantId) && 
      !is_valid_ewallet_id(merchantId)) {
    errors.push('Invalid merchant ID format');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
  if (amount !== undefined && !is_valid_amount(amount)) {
    errors.push('Invalid amount');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
} 